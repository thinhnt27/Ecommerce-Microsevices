name: dockercompose8279660842975161625
services:
  basket.api:
    build:
      context: Z:\Code\.NET\Ecommerce
      dockerfile: Services/Basket/Basket.API/Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings__ConnectionString: basketdb:6379
    image: basketapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8001"
        protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    restart: always
  catalog.api:
    build:
      context: Z:\Code\.NET\Ecommerce
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings__BrandsCollection: Brands
      DatabaseSettings__CollectionName: Products
      DatabaseSettings__ConnectionString: mongodb://catalogdb:27017
      DatabaseSettings__DatabaseName: CatalogDb
      DatabaseSettings__TypesCollection: Types
    image: catalogapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8000"
        protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
      - mode: ingress
        target: 27017
        published: "27017"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: mongo_data
        target: /data/db
        volume: {}
networks:
  default:
    name: dockercompose8279660842975161625_default
volumes:
  mongo_data:
    name: dockercompose8279660842975161625_mongo_data